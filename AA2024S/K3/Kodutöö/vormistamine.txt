Kodutööde vormistamine, hindamine ja muud nõuded (NB: pöörake tähelepanu plagiaadi ja tehisintellekti kohta käivale osale)

Ülesandeks on koostada Java-programm, mis sisaldab ühte või mitut, alamülesannet lahendavat meetodit. Lahenduse kirjutamist tuleb alustada ülesande püstituses kirjeldatud mallist (v.a. 1. kodutöö).

Üldised nõuded:

    Lahenduse toimimine ei tohi sõltuda kasutatavast arenduskeskkonnast ega operatsioonisüsteemist.
    Lubatud on kasutada vahendeid ainult Java standardsest rakendusteegist (API).
    Lahendusprogramm ei suhtle kasutajaga; kui tulemust on vaja väljastada, siis tuleb see väljastada standardväljundisse (System.out).
    Klassimuutujaid (muutujaid võtmesõnaga static) kasutada ei tohi.
    Lahendusprogramm peab töötama Java versiooniga 17.

Mõnikord seatakse programmikoodile täiendavaid piiranguid. Näiteks: kogu kood peab olema ühes failis; koodis ei tohi olla käsku import, termi java jne. Iga kodutöö puhul selgitage enda jaoks, millised piirangud kehtivad programmikoodile.
Vorminõuded

Java-programmi alguses peab (kommentaariblokina) olema esitatud programmi päis:

/***********************************
 * Algoritmid ja andmestruktuurid. LTAT.03.005
 * 2024/2025 kevadsemester
 *
 * Kodutöö nr TODO
 * Teema: TODO
 *
 * Autor: TODO
 *
 **********************************/

Iga meetod (v.a peameetod main) peab olema varustatud oma välise spetsifikatsiooniga: otstarve, parameetrite ja tagastuse kirjeldus. Väline spetsifikatsioon võib olla Javadoc stiilis (eelneb vahetult meetodile) või esitatud reakommentaaridest koosneva lihttekstina kohe meetodi alguses:

Javadoc (eelistatud):

/**
 * Järjendi summa leidmine rekursiivselt.
 * @param a Antud järjend.
 * @param n Antud järjendi vaadeldava algusosa pikkus.
 * @return Järjendi a algusosa elementide summa a[0]+a[1]+...+a[n-1]
 */
 static int summaRek(int[] a, int n) {

Lihttekst:

static int summarRek(int[] a, int n) {
 // Otstarve: Järjendi summa leidmine rekursiivselt.
 // Antud: järjend a ja selle vaadeldava algusosa pikkus n
 // Tulemus: Järjendi a algusosa elementide summa a[0]+a[1]+...+a[n-1]

Eesti keel olgu prioriteet, sh muutujate, meetodite jmt nimed ning kommentaarid. Võimalusel hoiduda anglitsismidest!

Meetodi sees esitatakse olulisemad, eeskätt algoritmi ideed mõista aitavad kommentaarid.
Välised allikad ja viitamine

Kodutöö eesmärk on kontrollida õpilase oskusi luua ja kasutada algoritme ning seostada ja kinnistada kursusel õpitut. Kui tööjuhises ei ole antud selgesõnalist luba kasutada välistest allikatest võetud koodi, siis on ootus, et kodutöö lahendus on täielikult õpilase enda kirjutatud ja kursusesisestest allikatest pärinev kood.

Kursusesisesed allikad on allikad mis pärinevad sellest ainekurusest (nt loenguslaidid, ülesannete kogu, tahvlipraktikumis näidatud kood).
Välised allikad on kõik muud allikad (nt veebilehed, õpikud, sõbrad-tuttavad ja ChatGPT).

Välistest allikatest võib võtta algoritmi kirjelduse, lahenduse üldise idee või inspiratsiooni. Sellisel juhul peab välisele allikale olema viidatud. Üldjuhul ei või välistest allikatest võtta koodi, isegi kui allikale on viidatud. Erandina võib välistest allikatest võtta koodi kahel juhul (kindlasti peab siis allikale olema viidatud):

    kui ülesande püstituses on antud selleks selgesõnaline luba;
    kui tegemist on lühikese (kuni paarirealise) rakendusliideste kasutusnäitega (nt näide kuidas teisendada massiiv järjendiks, kuidas läbida paisktabeli väärtusi, kuidas kopeerida massiivi, jms).

Kui välistest allikatest on võetud koodi olukorras kus see ei ole lubatud või kui väliseid allikaid on kasutatud ilma viitamata, siis on tegemist akadeemilise petturlusega!

Enamlevinud probleemsituatsioonid:

    Õpilane on internetist kopeerinud olemasolevat Java koodi. (EI OLE LUBATUD. ERAND: KUI LUBAMINE ON SELGELT SELLE TÖÖ JUHENDIS KIRJAS)
    Õpilane on lasknud tehisintellektil (ChatGPT vms) kodutöös nõutud meetodi jaoks koodi genereerida. (EI OLE LUBATUD. ERAND: KUI LUBAMINE ON SELGELT SELLE TÖÖ JUHENDIS KIRJAS)
    Erijuht: Õpilane on internetist kopeerinud kuni paarirealise koodijupi mis on näide kuidas kasutada mõnda Java rakendusliidest. (ENAMJAOLT ON LUBATUD)
    Õpilane on internetist võtnud olemasolevat koodi mingis teises programmeerimiskeeles ja tõlkinud selle Javasse. (EI OLE LUBATUD. ERAND: KUI LUBAMINE ON SELGELT SELLE TÖÖ JUHENDIS KIRJAS)
    Õpilane on lahenduses kasutanud koodi mille õppejõud praktikumis kirjutas. (LUBATUD)
    Õpilane on realiseerinud internetis pseudokoodina esitatud algoritmi/võtte Javas. (LUBATUD, KUID SOOVITAME LAHENDUSIDEE ISE VÄLJA MÕELDA)
    Õpilane on realiseerinud internetis kirjeldusena esitatud algoritmi/võtte Javas. (LUBATUD, KUID SOOVITAME LAHENDUSIDEE ISE VÄLJA MÕELDA)

Hindamine

Enamikul kodutöödest on kaks varianti, millest peaks valima ja lahendama ühe. Kui lahendate mõlemad, siis läheb arvesse see variant, mille lahenduse eest saite kõige rohkem punkte.

Kodutöid hinnatakse üldjuhul 100 punkti skaalas. Osadel kodutöödel võib olla ka lisaülesanne, mille jaoks lisatakse põhipunktidele 20-40 punkti.

Kui kodutöö esitatakse automaatkontrolliga, siis lahenduse hinne kujuneb enamasti kolmest osast:

    Tulemus (80p). Programm teeb seda, mis nõutud.
    Sisu (10p). Programmi struktuur ja meetodite sätestus on otstarbekohane.
    Vorm (10p). Programmi päis ja meetodite spetsifikatsioonid on nõuetekohased. Selgitavad kommentaarid on mõistlikud ja ammendavad.

Automaatkontroll annab üldjuhul 80 punkti tulemuse eest. Ülejäänud 20 punkti sisu ja vormi eest antakse käsitsi hindamisel.
Sisu ja vormi eest antavate punktide maksimum on võrdeline lahendatud ülesannete osakaaluga. Näiteks kui lahendatud on pooled ülesannetest siis on sisu ja vormi eest ülimalt võimalik saada 20p * 0.5 = 10p.

Automaatkontrolli punktid ei ole lõplikud. Lõplikud punktid otsustab hindaja.
